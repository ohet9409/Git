<이클립스> : just 코드 편집기
-> 서버등록(아파치-톰캣)
-> 브라우저 등록
    동작순서   => 	1. 서버구동(아파치 톰캣)
		2. 브라우저 구동
		3. 브라우저에게 파일요청 지시

https://girlman.tistory.com/entry/Eclipse-%EC%9D%B4%ED%81%B4%EB%A6%BD%EC%8A%A4-Html5-web-page-editor-2
https://www.ilovepdf.com/

* HTML 문서의 구성
1. HTML 언어	: 내용
2. CSS 언어	: 꾸미기
3. Javascript 언어	: 동작(이벤트 쿼리 포함)
   => jQuery, Ajax
   => 동작 + 이벤트 처리
   => 태그 제어

* Javascript 언어
=> html에서만 사용되어지는 언어
=> 프로그래밍 언어와 구조가 비스
=> 1. 변수
     2. 함수, 객체
     3. 연산자, 제어문, 내장객체
=> 목적 : 특정 태그에 어떤 동작을 주던지, 이벤트 처리

* Javascript의 기본
1. 태그 선택 방법
2. 함수의 사용

* Javascript 사용방법
1. <script>태그 안에서 사용
2. 이벤트 속성으로 사용
3. 파일로 사용

* Javascript가 동작되는 시점
 => 순서대로 인식

* onload가 동작되는 시점
 => 브라우저가 모든 태그를 인식한 다음 동작됨

* Javascript에서 태그를 선택하는 방법
1. 태그의 선택 방법
	1) 태그의 id로 선택
		document.getElementById("아이디");
	2) 태그의 name으로 선택
		document.getElementsByName("이름");
	3) 태그의 name으로 선택
		document.이름

2. 함수의 사용
	1) function 함수명() {
		명령문;
	}
	함수명();
	2) var 변수명 = function() {
		명령문;
	}
	변수명();

* on~ : 이벤트 처리 속성
  => javascript 명령어들을 사용

* window 내장객체
=> 브라우저를 관리

* HTML 언어의 구조
<이름 속성 ="값">  내용 	</이름>
시작태그		화면	종료태그
=> 내용이 없을 때, 약식 표현 사용 가능
<이름 속성="값"></이름>
<이름 속성="값"/>

* test 주소
http://localhost:8080/test.html

* 아파치 서버가 관리하는 폴더위치
D:\android_3rd_oh\jsp\apache-tomcat-8.5.40\webapps\ROOT

* 이클립스에 등록된 서버의 폴더 위치
D:\android_3rd_oh\jsp\worksapce\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\ROOT

* html 태그의 종료
1. 블럭 태그
=> 묶어주는 기능
=> 자동줄넘김이 있음

2. 인라인 태그
=> 자동줄넘김이 없음

* 요청 URL의 구조
http://localhost:8080/test.html?user_id=hong
		요청파일명?서버로 보내는 데이터

예)
http://localhost:8080/6-html/exam2.html?user_id=hong
http://localhost:8080/6-html/exam2.html?user_id=hi&
user_name=123&user_pw=123456&memo=i+am+poo&data=hidden+data
http://localhost:8080/6-html/exam5.html?hobby=%EC%B6%95%EA%B5%AC
&hobby=%EB%86%8D%EA%B5%AC&hobby=%EC%95%BC%EA%B5%AC

* 웹프로그램 언어를 공부하는 목적
=> 클라이언트에서 서버로 전송된 데이터를 처리하기 위해서
=> jsp, php, asp.....

https://www.w3schools.com/
https://github.com/emmetio/emmet-eclipse#readme%20%EC%B6%9C%EC%B2%98:%20https://stove99.tistory.com/5%20[%EC%8A%A4%ED%86%A0%EB%B8%8C%20%ED%9B%8C%EB%A1%9C%EA%B5%AC]

*에러 코드
404 : 파일 없음
500 : jsp 파일 코드 에러

*CSS의 기본
1. CSS 사용방법
 => 3가지
     1)<style>태그 사용	=> 한 페이지에 여러 태그에 적용할 때, 양이 중간
     2) style 속성 사용	=> 특정 태그에만 적용할 때, 양이 적음
     3) css 파일 사용	=> 양이 많고, 여러 파일에서 공통 사용할 때, 양이 많음
2. 선택자(Selector)
=> 태그를 선택하는 방법
     1) 태그 이름으로 선택	예) p{} div{}
     2) class 속성으로 선택	예) .이름 {}
     3) id 속성으로 선택	예) #이름 {}
     4) 자식 셀렉터 사용
     5) 자손 셀렉터 사용
     6) 가상 클래스 기법

* HTML에서의 화면 분할 방법
1. Table 태그 이용
=> 화면 크기 고정일 때
2. CSS 이용
=> 화면크기 고정일 때
=> 화면크기 가변일 때

* CSS에서 태그에 이름 붙이기
1.Class 속성
=> 여러 태그를 한꺼번에 지정할 때
2. ID 속성
=> 태그 하나에만 이름 붙일 때

<서블릿>
=> html in java
=> 데이터 처리
	+ Html 문서 작성

* 클라이언트의 요청의 서버 처리 
1. test.html 파일 요청
 => 아파치 서버가 요청 처리
2. test.jsp 파일 요청
 => 아파치 서버가 요청을 톰캣서버로 넘김
 => 톰캣 서버는 test.jsp 파일을 찾아서
	데이터 처리후, HTML 문서를 만들어서 아파치 서버로 넘겨줌
 => 아파치 서버는 HTML 문서를 클라이언트로 돌려줌
3. test란 이름으로 요청 (확장자 없음)
 => 아파치 서버가 요청을 톰캣서버로 넘김
 => 톰캣 서버는 web.xml 파일에 test란 이름으로 등록된 서블릿 클래스를 구동시킴
 => 서블릿에서는 데이터 처리후, HTML 문서를 만들어서 아파치 서버로 넘겨줌
 => 아파치 서버는 HTML문서를 클라이언트로 돌려줌

* web.xml (WebContent -> WEB-INF -> web.xml)
=> 톰캣서버에 등록되는 프로젝트의 웹에 대한 설정 파일

* xml 파일의 구조
<이름 속성="값">데이터</이름>
시작태그			종료태그


* 에러 메시지
1. 404: 파일없음
2. 500: 서블릿 또는 jsp 파일 내부 오류

* 서블릿 등록 방법
1. web.xml에 등록
2. 어노테이션으로 등록

* 클라이언트에서 서버로 요청을 할때, 데이터 전송 방식
1. get 방식
http://localhost:8080/7-Servlet/ParamServlet?name=aa&age=110
2. post 방식
http://localhost:8080/7-Servlet/ParamServlet

* 서블릿의 동작
1. 데이터 처리
2. HTML 문서 만들기

// JSP
D:\android_3rd_oh\jsp\worksapce\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\work\Catalina\localhost\8-JSP\org\apache\jsp

* ~.jsp 파일의 구조
1. 자바 영역
   => 데이터 처리
   => <% %>가 자바 영역
2. HTML 영역
   => HTML문서 만들기
   => <% %>를 뺀 나머지 영역

* 게시판
- 회원관리
- 글관리

* response.sendRedirect("exam3Pro.jsp") 의 동작 순서
1. 브라우저가 요청
http://localhost:8080/9-innerObject/exam3.jsp
2. 서버가 jsp에서 response.sendRedirect()코드를 만나면
   브라우저에게 "exam3Pro.jsp" 정보만 전달함
3. 브라우저가 다시요청
http://localhost:8080/9-innerObject/exam3Pro.jsp