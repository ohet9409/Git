https://brainshareme.com/android-app-30plus/
https://jhrun.tistory.com/172
* HTML 문서의 구성
1. HTML 언어
   => 용도 : 화면내용
2. CSS 언어
   => 용도 : 화면 꾸미기
아이디 = #id
클래스 = .class
3. Javascript 언어
	=> jQuery로 대체해서 많이 사용함
	=> 용도 : 태그 제어 + 이벤트 처리
* jQuery의 특징
 => Javascript 언어 대체
 => 태그 선택방법이 CSS와 동일
 => $객체 사용

다운 사이트 : https://jquery.com/download/

* jQuery 사용법
1. 함수 이름 사용
	function ex(){
	}
	jQuery(ex);
2. 함수 자체를 사용
	jQuery(function() {
	
	});
3. $객체를 전달받기 위해 파라미터 선언
	$:(jQuery함수이름)(function($:(매개변수)) {

	});
4. jQuery() 함수의 축약
	$(function() {

	});
* $객체
- jQuery()의 모든 기능은 $라는 객체의 하위로 포함되어 있다.
- $는 jQuery의 모든 기능을 담고 있는 객체이자 함수이다.
- jQuery() 함수로 페이지가 열릴때, 특정함수를 호출하게 되면,
  이 특정함수는 파라미터로 $객체를 받는다.
  이 $객체로 jQuery의 막강한 기능들을 사용할 수 있다.
  (예) 	function ex($){
	
	}
* $객체가 태그를 선택하는 방법은 CSS셀렉터 (선택자)와 동일
 	var h1 = $("h1");	=> h1 모든 태그 선택
	var hello = $(".hello");	=> 클래스 명이 hello인 것을 선택
	var hello1 = $("#hello1");   	=> id명이 hello1인 것을 선택

- jQuery에 추가된 가상 클래스
 => eq(n) : 여러개의 요소중에서 n번째 요소
 => 요소는 0부터 카운트
 => 예) ul > li:eq(1), ul > li:eq(2)
  	<ul>
		<li>item 1</li>
		<li>item 2</li>	<!-- ul >  li:eq(1) -->
		<li>item 3</li>	<!-- ul >  li:eq(2) -->
		<li>item 4</li>
	</ul>
* 속성값 제어
1. 속성값 읽기
var 변수명 = $("요소").attr("속성이름");
2. 속성값 변경 및 추가하기
$("요소").attr("속성이름", "값");

$("요소").attr({
	"속성이름": "값",
	"속성이름": "값",
	"속성이름": "값"
	});

2. checkbox의 체크상태 속성 제어
=> 체크박스의 선택은 HTML 태그의 checked 속성으로 추가할 수 있다.
    이 속성은 이름만 지정하고 별도의 값이 없는 형태이기 때문에,
    attr() 함수가 아닌 prop()함수를 사용한다.
$(".hobby").prop("checked", is_check);

* 태그의 CSS 속성 제어
1. CSS 속성값 읽기
var 변수명 = $("요소").css("CSS 속성 이름");

2. 속성값 변경 및 추가하기
$("요소").css("속성이름", "값");

$("요소").css({
	"속성이름": "값",
	"속성이름": "값",
	"속성이름": "값"
	});

* 태그(요소)의 CSS 클래스 제어
1. CSS 클래스의 적용 여부 알기
  => HTML 태그 요소의 특정 클래스 적용여부는 hasClass() 함수의 리턴값(boolean)으로 
      파악할 수 있다.
  => var 변수 = $("요소").hasClass("클래스이름");

	<p class="content">내용</p>

2. 클래스의 적용과 해제
  => addClass() : 특정 요소에게 CSS클래스를 적용할 경우
	$("요소").addClass("클래스 이름");
  => removeClass() : HTML 태그 요소에 적용된 특정 CSS클래스를 제거할 경우
	$("요소").removeClass("클래스 이름");

3. 클래스의 적용과 해제의 반복 처리
  => toggleClass() : HTML 태그 요소의 CSS클래스에 대한 적용과 해제를 자동 순환 반복
  => $("요소").toggleClass("클래스 이름");

* 태그(요소)의 표시/숨기기 기능
1. CSS의 display 속성
  => 특정 요소에 CSS의 display속성값을 "none"으로 지정하면 해당 
      요소를 화면에서 보이지 않게 처리할 수 있다.
  => 반대로 "display"속성을 "inline-block", "inline" 등의 값을 지정하면
      사라진 요소를 다시 화면에 표시할 수 있다.
  => jQuery
      $("셀렉터").click(function(){
      		$(this).css("display", "block");
		$(this).css("display", "none");
      });

* animate() 함수
  => 좀 더 다이나믹한 애니메이션을 구사할 수 있다.
  => 구조
       animate(properties [, duration][, easing][, complete]);
  1) properties : 움직임을 만들어 낼 수 있는 CSS 속성들, JSON형식으로 사용
  2) duration : 애니메이션 지속시간 설정
  3) easing : 움직임에 변화를 줄 수 있는 속성
	-> swing : 끝점에 가서 속도가 살짝 느려짐
	-> linear : 균일한 속도 유지
  4) complete : 움직임이 멈춘 후 실행될 속성, 이 속성에 지정된 함수가 실행됨

* DOM (Document Object Model)
- DOM은 HTML과 XML문서에 대한 구조적 정보를 제공하는 양식이다.
  즉, DOM은 HTML과 XML문서의 뼈대를 의미한다.
- DOM은 문서구조나 외양 및 내용을 바꿀 수 있도록 프로그램에서 접근할 수 있는
  방법을 제공하는 인터페이스를 말한다.
- DOM은 프로퍼티와 메소드를 가지는 객체와 노드의 트리형 구조로 표현되는데,
  이 구조는 스크립트나 다른 언어에서 웹페이에 접근할 때 필수적이다.

1. DOM의 구성요소
1) Element : (= HTML 태그) 하나의 태그 요소를 의미
2) Attribute : (= HTML 태그 속성) 하나의 Element에 속해 있는 속성들을 의미
3) Node : 하나의 Element에서 시작되는 트리구조,
            하나의 노드안에는 여러개의 노드가 포함되어 있을 수 있다.

* jQuery에서 DOM 사용
1. next() : 현재 태그를 기준으로 다음 태그를 리턴
2. prev() : 현재 태그를 기준으로 이전 태그를 리턴
3. parent() : 현재 태그를 기준으로 상위 태그를 리턴
4. children() : 현재 태그를 기준으로 하위 태그를 배열로 리
5. eq(n) : 현재 태그를 기준으로 하위 태그중 n번째 태그를 선택, n은 0부터 시작

* 조상과 자손의 검색
1. 직계 자손이나 항렬이 같은 친척 찾기
   => next(), prev(), parent(), children(), eq(n) 함수들은 특정요소와 인접해 있는 다른 요소들을 탐색한다.
        즉, 이 함수들은 HTML 태그의 Node를 타고 다니는 것과 같은 효과를 갖는다.
2. 가까운 조상 찾기
   => parents() : HTML요소가 인접해 있지 않더라도, 현재 요소의 상위 태그 중에서
        파라미터로 전달된 셀렉터가 가리키는 가장 가까운 요소를 찾는다.
   => $("css셀렉터").parents("css셀렉터");
3. 가까운 자손 찾기
   => find() : HTML 요소가 인접해 있지 않더라도, 현재 요소의 하위 태그 중에서 
       파라미터로 전달된 셀렉터가 가리키는 가장 가까운 요소를 검색한다.
   => $("css셀렉터").find("css셀렉터");

* 이벤트 처리 기법
1. bind() 함수
 => jQuery에서 이벤트 처리를 목적으로 사용하는 함수
 => 앞의 이벤트 처리 기법들은 모두 이 함수에서 파생된 것이다.
(1) 기존의 이벤트 처리방식과 비교
	1) 기존 방식
	   $("요소").이벤트(function(){
		... 이벤트 처리 ...
	   });

	2) bind() 함수 이용 방식
	   $("요소").bind("이벤트", function(){
		... 이벤트 처리 ...
	   });

(2) bind() 함수의 특수용법
  => 이벤트 이름을 공백으로 구분하여 여러개 지정하고,
      하나의 공통된 함수를 연결 할 수 있다.
      $("요소").bind("이벤트1 이벤트2 이벤트3", function(){
	... 이벤트 처리 ...
      });
  => 하나의 요소에 json 형태로 구성된 다수의 이벤트를 한꺼번에 연결할 수도 있다.
      $("요소").bind({
	"이벤트1" : function() {... 이벤트 처리 ...},
	"이벤트2" : function() {... 이벤트 처리 ...},
	"이벤트3" : function() {... 이벤트 처리 ...}
      });

* on() 함수
=> 앞으로 동적으로 추가될 요소에 대한 이벤트를 미리 정의해 놓는 기능
=> 새로 추가될 요소에 대한 이벤트이기 때문에, 이 이벤트가 정의되는 시점에서는
     대상이 존재하지 않기 때문에, 이 이벤트는 document객체에 설정해야 한다.
=> $(document).on("이벤트","셀렉터",function(){
		... 이벤트 처리 ...
	});

* Ajax의 주 기능
- 주기능 : Json 또는 XML 데이터 처리
- 활용 : 부분 화면 처리
- 사용 함수
  $.ajax() : 요청과 응답 처리

* 요청 URL
http://localhost:8080/03-HelloAjax/ajax/text/text01.txt

* Ajax, load() 함수
 => 읽어오고자 하는 대상의 내용이 단순한 text나 html태그를 표현하며
      읽어온 내용을 특정 요소에 출력하는 것만을 목적으로 할 경우,
      load() 함수를 사용해 코드를 축약할 수 있다.
 => $("CSS셀렉터").load(
	"읽어올 대상의 URL" [,function(){...읽기에 성공한 후 실행될 함수...}]
      );
     => (예) "readme.html" 파일의 전체 내용중에서 "#my"라는 id값을 갖는 요소만을
	    읽어올 경우
	    $("출력할 대상의 셀렉터").load("readme.html #my");

* $.get() / $.post()
1. $.ajax({
	url: "XML파일의 url",
	type: "get 또는 post",
  	data: "파라미터 문자열 key=value&key=value",
	dataType: "xml",
	success: function(){
		... 통신이 성공한 경우 실행되는 함수 ...
	}
 });
2. $.get("url",{파라미터 json}, function(){
	... XML 데이터 처리
  }, ["xml"]).fail(function(){통신 실패할 경우 실행되는 함수})
     .always(function(){통신성공이든 실패이든 실행되는 함수});  //[ ] 생략가능

* $(this).serialize()
  => 데이터를 보내기 위해 폼요소 집합을 문자열로 인코딩한다.(파라미터 값)