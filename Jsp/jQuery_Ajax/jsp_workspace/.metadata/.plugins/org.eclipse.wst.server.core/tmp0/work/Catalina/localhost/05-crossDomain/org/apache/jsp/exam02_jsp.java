/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-08-12 06:51:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/reset.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/common.css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<!-- plugin 참조 -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"plugins/xdomain/jquery.xdomainajax.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t/* 구글 뉴스 데이터를 불러와서 화면에 출력하는 함수 */\r\n");
      out.write("\tfunction getNewsList(topic) {\r\n");
      out.write("\t\t// 접속할 주소\r\n");
      out.write("\t\tvar url = \"https://news.google.com/news/feeds\";\r\n");
      out.write("\t\t// 구글에서 요구하는 파라미터\r\n");
      out.write("\t\tvar data = {\r\n");
      out.write("\t\t\t\"pz\" :1,\r\n");
      out.write("\t\t\t\"cf\" : \"all\",\r\n");
      out.write("\t\t\t\"ned\": \"kr\",\r\n");
      out.write("\t\t\t\"hl\": \"ko\",\r\n");
      out.write("\t\t\t\"topic\": topic,\r\n");
      out.write("\t\t\t\"output\": \"rss\"\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// get방식 요청\r\n");
      out.write("\t\t$.get(url,data,function(data){\r\n");
      out.write("\t\t\talert(\"test2\");\r\n");
      out.write("\t\t}).fail(function() {\n");
      out.write("\t\t\talert(\"test3\");\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\tgetNewsList($(\"#topic > option:selected\").val());\r\n");
      out.write("\t\t// 드롭다운의 선택항목이 변경된 경우\r\n");
      out.write("\t\t$(\"#topic\").change(function() {\r\n");
      out.write("\t\t\t// 이전 검색결과 삭제\r\n");
      out.write("\t\t\t$(\"#list\").empty();\r\n");
      out.write("\t\t\t// 선택항목의 value값을 획득해서 ajax 연동을 구현한 함수에게 전달\r\n");
      out.write("\t\t\tgetNewsList($(this).find(\"option:selected\").val());\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1 class=\"title\">구글 뉴스 연동</h1>\r\n");
      out.write("<div class=\"exec\">\r\n");
      out.write("\t<form action=\"\" name=\"form1\">\r\n");
      out.write("\t\t<fieldset>\r\n");
      out.write("\t\t\t<label>뉴스분야 선택</label>\r\n");
      out.write("\t\t\t<select name=\"topic\" id=\"topic\">\r\n");
      out.write("\t\t\t\t<option>-- 주요 뉴스 --</option>\r\n");
      out.write("\t\t\t\t<option value=\"p\">정치</option>\r\n");
      out.write("\t\t\t\t<option value=\"b\">경제</option>\r\n");
      out.write("\t\t\t\t<option value=\"y\">사회</option>\r\n");
      out.write("\t\t\t\t<option value=\"l\">문화/생활</option>\r\n");
      out.write("\t\t\t\t<option value=\"w\">국제</option>\r\n");
      out.write("\t\t\t\t<option value=\"t\">과학기술</option>\r\n");
      out.write("\t\t\t\t<option value=\"e\">연예</option>\r\n");
      out.write("\t\t\t\t<option value=\"s\">스포츠</option>\r\n");
      out.write("\t\t\t</select>\r\n");
      out.write("\t\t</fieldset>\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
