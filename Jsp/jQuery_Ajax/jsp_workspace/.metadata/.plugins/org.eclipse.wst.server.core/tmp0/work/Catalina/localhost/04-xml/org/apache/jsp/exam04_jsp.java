/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-08-09 09:13:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class exam04_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t/* 전체 여백 크기 초기화, 기본 글자색 지정  */\r\n");
      out.write("\t* {\r\n");
      out.write("\t\tpadding: 0;\r\n");
      out.write("\t\tmargin: 0;\r\n");
      out.write("\t\tcolor: #333;\r\n");
      out.write("\t}\r\n");
      out.write("\tbody{\r\n");
      out.write("\t\tpadding: 20px 30px;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t/* form 영역의 크기 및 테두리 */\r\n");
      out.write("\t#login fieldset {\r\n");
      out.write("\t\twidth: 270px;\r\n");
      out.write("\t\tpadding: 15px;\r\n");
      out.write("\t\tborder: 1px solid #7BAEB5;\r\n");
      out.write("\t\tposition: relative;\r\n");
      out.write("\t}\r\n");
      out.write("\t#login legend{\r\n");
      out.write("\t \tdisplay: none;\r\n");
      out.write("\t}\r\n");
      out.write("\t/* 입력항목 설정 */\r\n");
      out.write("\t#login label {\r\n");
      out.write("\t\tdisplay: inline-block; \r\n");
      out.write("\t\twidth: 80px;\r\n");
      out.write("\t\tfont-size: 14px;\r\n");
      out.write("\t\tfont-weight: bold;\r\n");
      out.write("\t\tpadding-left: 10px;\r\n");
      out.write("\t\tmargin-bottom: 10px;\r\n");
      out.write("\t}\r\n");
      out.write("\t#login input[type='text'], input[type='password']{\r\n");
      out.write("\t\tborder: 1px solid #ccc;\r\n");
      out.write("\t\tpadding: 3px 10px;\r\n");
      out.write("\t\twidth: 150px;\r\n");
      out.write("\t\tvertical-align: middle;\r\n");
      out.write("\t\tfont-size: 12px;\r\n");
      out.write("\t\tline-height: 150%;\r\n");
      out.write("\t}\r\n");
      out.write("\t/* 버튼 크기 지정 */\r\n");
      out.write("\t#login input[type='submit']{\r\n");
      out.write("\t\twidth: 270px;\r\n");
      out.write("\t\theight: 20px;\r\n");
      out.write("\t}\r\n");
      out.write("\t/* 활성화 input에 적용할 스타일 */\r\n");
      out.write("\t.active{\r\n");
      out.write("\t\tborder: 1px solid #f00;\r\n");
      out.write("\t\tbackground: #98bf21;\r\n");
      out.write("\t}\r\n");
      out.write("\t/* 로딩 박스 */\r\n");
      out.write("\t#login{\r\n");
      out.write("\t\tposition: relative;\r\n");
      out.write("\t}\r\n");
      out.write("\t#login fieldset .loader{\r\n");
      out.write("\t\tposition: absolute;\r\n");
      out.write("\t\tleft: 0; \r\n");
      out.write("\t\ttop: 0;\r\n");
      out.write("\t\twidth: 100%;\r\n");
      out.write("\t\theight: 100%;\r\n");
      out.write("\t\tbackground: rgba(0, 0, 0, 0.3);\r\n");
      out.write("\t\tdisplay: none; \r\n");
      out.write("\t}\r\n");
      out.write("\t/* 이미지를 로딩박스 한가운데 배치하기 */\r\n");
      out.write("\t#login .loader img{\r\n");
      out.write("\t\tposition: absolute;\r\n");
      out.write("\t\tleft: 50%;\r\n");
      out.write("\t\ttop: 50%;\r\n");
      out.write("\t\tmargin-left: -5px;\r\n");
      out.write("\t\tmargin-top: -5px; \r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\t// #user_name과 #user_password에 대한 focus, blur 이벤트 처리\r\n");
      out.write("\t\t$(\"#user_name, #user_password\").bind({\n");
      out.write("\t\t\t\"focus\": function() {\r\n");
      out.write("\t\t\t\t$(this).addClass(\"active\");\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\t\"blur\": function() {\r\n");
      out.write("\t\t\t\t$(this).removeClass(\"active\");\r\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\r\n");
      out.write("\t\t// 폼에 대한 submit 이벤트 처리 -> 입력값 여부 검사\r\n");
      out.write("\t\t$(\"#login\").bind(\"submit\", function() {\r\n");
      out.write("\t\t\t// 입력값 검사\r\n");
      out.write("\t\t\tif (!$(\"#user_name\").val()) {\r\n");
      out.write("\t\t\t\talert(\"아이디를 입력하세요\");\r\n");
      out.write("\t\t\t\t$(\"#user_name\").focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (!$(\"#user_password\").val()) {\r\n");
      out.write("\t\t\t\talert(\"비밀번호를 입력하세요\");\r\n");
      out.write("\t\t\t\t$(\"#user_password\").focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t// 로딩 바 보여주기\r\n");
      out.write("\t\t\t$(\"#login .loader\").show();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar url = \"ajax/login/login.jsp\";\r\n");
      out.write("//\t\t\tvar ajax = $.get(url, $(this).serialize(), function(data){\r\n");
      out.write("\t\t\tvar ajax = $.post(url, $(this).serialize(), function(data){\r\n");
      out.write("\t\t\t\tvar result_value = $(data).find(\"result\").text();\r\n");
      out.write("\t\t\t\tvar message = $(data).find(\"message\").text();\r\n");
      out.write("\t\t\t\tvar user_name = $(data).find(\"user_name\").text();\r\n");
      out.write("\t\t\t\tvar user_password = $(data).find(\"user_password\").text();\r\n");
      out.write("\t\t\t\t//alert(user_name + \" / \" + user_password);\r\n");
      out.write("\t\t\t\tvar result = eval(result_value);\r\n");
      out.write("\t\t\t\t// 결과 메시지 출력\r\n");
      out.write("\t\t\t\talert(message);\r\n");
      out.write("\t\t\t\t// 결과에 따른 후속 처리\r\n");
      out.write("\t\t\t\tif (result) {\r\n");
      out.write("\t\t\t\t\t// 로그인 성공시 처리할 부분\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t// 로그인 실패시 처리할 부분\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}).fail(function() {\r\n");
      out.write("\t\t\t\talert(\"통신 실패. 잠시후에 다시 시도해 주세요.\")\r\n");
      out.write("\t\t\t}).always(function() {\r\n");
      out.write("\t\t\t\t// 로딩 바 감추기\n");
      out.write("\t\t\t\t$(\"#login .loader\").hide();\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"\" id=\"login\">\r\n");
      out.write("\t<fieldset>\r\n");
      out.write("\t\t<legend>로그인</legend>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<label for=\"user_name\">아이디</label>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"user_name\" id=\"user_name\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<label for=\"user_password\">비밀번호</label>\r\n");
      out.write("\t\t\t<input type=\"password\" name=\"user_password\" id=\"user_password\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<input type=\"submit\" value=\"로그인\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"loader\"><img alt=\"이미지\" src=\"img/loader.gif\"> </div>\r\n");
      out.write("\t</fieldset>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
