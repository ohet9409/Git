/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-06-25 00:34:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.bean.BoardDTO;
import java.util.List;
import board.dao.BoardDAO;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("board.dao.BoardDAO");
    _jspx_imports_classes.add("board.bean.BoardDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
	// 데이터
	int pg = Integer.parseInt(request.getParameter("pg"));
	// 5개씩 목록 보여주기
	// (1, 5)
	// (6, 10)
	// (11, 15)
	// (16, 20)	
	int endNum = pg * 5;
	int startNum = endNum - 4;
	
	BoardDAO boardDAO = new BoardDAO();
	List<BoardDTO> list = boardDAO.boardList(startNum, endNum);
	
	/* 페이징 처리 (목록은 5줄 씩)
	      총페이지 수 = (총글수 + 4)/5
	    총글수 : 12
	    총페이지수:3		[1][2][3]
	  
	    총글수 : 23
	    총페이지수:5		[1][2][3][4][5]
	*/
	int totalA = boardDAO.getTotalA();	// 총글수
	int totalP = (totalA + 4) / 5;	// 총페이지수
	/* 페이지는3개씩 끊어서 보여줌
		총페이지수 : 8
			 [1][2][3][다음]
		[이전][4][5][6][다음]
		[이전][7][8]
	*/
	int startPage = (pg-1)/3*3 + 1;	
	int endPage = startPage + 2;
	if(totalP < endPage) endPage = totalP;

      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>글목록</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tfunction isLogin(seq) {\r\n");
      out.write("\t\t");
 if(session.getAttribute("memId") == null) { // 로그아웃 상태
      out.write("\r\n");
      out.write("\t\t\t\talert(\"먼저 로그인 하세요.\");\r\n");
      out.write("\t\t\t\tlocation.href=\"../main/index.jsp\";\r\n");
      out.write("\t\t");
 } else { // 로그인 상태 
      out.write("\r\n");
      out.write("\t\t\t\tlocation.href=\"boardView.jsp?seq=\" + seq + \"&pg=");
      out.print(pg);
      out.write("\";\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#paging {\r\n");
      out.write("\tcolor: blue;\r\n");
      out.write("\ttext-decoration: none;\t\r\n");
      out.write("}\r\n");
      out.write("#currentPaging {\r\n");
      out.write("\tcolor: red;\r\n");
      out.write("\ttext-decoration: underline;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#subjectA:link {color: black; text-decoration: none;}\r\n");
      out.write("#subjectA:visited {color: black; text-decoration: none;}\r\n");
      out.write("#subjectA:achive {color: black; text-decoration: none;}\r\n");
      out.write("#subjectA:hover {color: blue; text-decoration: underline;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<table border=\"1\">\r\n");
      out.write("\t<tr bgcolor=\"#ffff00\">\r\n");
      out.write("\t\t<th width=\"70\">글번호</th>\r\n");
      out.write("\t\t<th width=\"200\">제목</th>\r\n");
      out.write("\t\t<th width=\"100\">작성자</th>\r\n");
      out.write("\t\t<th width=\"100\">작성일</th>\r\n");
      out.write("\t\t<th width=\"70\">조회수</th>\r\n");
      out.write("\t</tr>\r\n");
      out.write('\r');
      out.write('\n');
 for(BoardDTO boardDTO : list) { 
      out.write("\t\r\n");
      out.write("\t<tr bgcolor=\"#ffffcc\" align=\"center\">\r\n");
      out.write("\t\t<td>");
      out.print(boardDTO.getSeq() );
      out.write("</td>\r\n");
      out.write("\t\t<td><a id=\"subjectA\" href=\"#\" onclick=\"isLogin(");
      out.print(boardDTO.getSeq() );
      out.write(")\">\r\n");
      out.write("\t\t\t");
      out.print(boardDTO.getSubject() );
      out.write("\r\n");
      out.write("\t\t\t</a>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td>");
      out.print(boardDTO.getName() );
      out.write("</td>\r\n");
      out.write("\t\t<td>");
      out.print(boardDTO.getLogtime() );
      out.write("</td>\r\n");
      out.write("\t\t<td>");
      out.print(boardDTO.getHit() );
      out.write("</td>\r\n");
      out.write("\t</tr>\r\n");
 } 
      out.write("\t\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td colspan=\"5\" align=\"center\">\r\n");
      out.write("\t\t");
 if(startPage > 3) { 
      out.write("\r\n");
      out.write("\t\t\t[<a id=\"paging\" href=\"boardList.jsp?pg=");
      out.print(startPage-1 );
      out.write("\">이전</a>]\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t");
 for(int i=startPage; i<=endPage; i++) { 
      out.write("\r\n");
      out.write("\t\t\t");
if(pg==i) { 
      out.write(" \t\r\n");
      out.write("\t\t\t[<a id=\"currentPaging\" href=\"boardList.jsp?pg=");
      out.print(i );
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</a>]\r\n");
      out.write("\t\t\t");
 } else { 
      out.write("\r\n");
      out.write("\t\t\t[<a id=\"paging\" href=\"boardList.jsp?pg=");
      out.print(i );
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</a>]\t\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");
 if(endPage < totalP) { 
      out.write("\r\n");
      out.write("\t\t\t[<a id=\"paging\" href=\"boardList.jsp?pg=");
      out.print(endPage+1);
      out.write("\">다음</a>]\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table>\r\n");
      out.write("<a href=\"../main/index.jsp\">메인 화면</a>&nbsp;&nbsp;\r\n");
      out.write("<a href=\"boardWriteForm.jsp\">글쓰기</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
