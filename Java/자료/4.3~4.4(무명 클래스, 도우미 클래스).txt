<interface 사용법>
interface AAA{
 	void ex1();
	void ex2();
}
1. 상속 (기본사용법)
class BBB implements AAA{
	void ex1(){
	}
	void ex2(){
	}
}
(1) 자식 BBB bbb = new BBB();
	bbb.ex1();
	bbb.ex2();
(2) 부모 AAA aa= new BBB();
	aa.ex1();
	aa.ex2();

2. 무명 클래스 : 이름이 없는 클래스
   => 상속의 약식 표현
AAA aa = new AAA(){
	void ex1(){
	}
	void ex2(){
	}
};
	aa.ex1();
	aa.ex2();

* 도우미 클래스 -> 메모리를 많이 차지하는 단점이 있다.
=> 클래스 안의 특정 기능의 함수를 사용하고 싶을 때, 
    new로 클래스를 만들지 않고 함수를 사용하는 방법
1. 일반 클래스
class AAA{
	public int plus(int x, int y){
		return x + y;
	}
}
AAA aa = new AAA();
System.out.println(aa.plus(5,7));

2. static 메소드 사용(도우미 클래스)
class BBB{
	public static int plus(int x, int y){
		return x + y;
	}
}

System.out.println(BBB.plus(5,7));

3. singleton 클래스 => 도우미클래스 (메모리차지)단점을 보완해서 나옴
 => 객체를 1개만 만들어서 사용
 => new로 만들어서 사용못함.

class CCC {
	// singleton 패턴 시작
	private static CCC instance = null;
	
	public static CCC getInstance(){
		if(instance == null) instance = new CCC();
		return instance;
	}
	private CCC() {
	}
	// singleton 패턴 끝
	public int plus(int x, int y) {
		return x+y;
	}
}
CCC cc;
cc = CCC.getInstance();
System.out.println(cc.plus(5,7));

System.out.println(CCC.getInstance().plus(5,7));