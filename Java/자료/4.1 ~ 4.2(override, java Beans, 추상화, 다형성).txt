* 오버라이드: 함수의 재정의

* 부모 클래스
class AAA {
	int num;
	void ex1( ){
	}
}

1. 멤버변수도 포함
-> 기존 클래스를 수정없이 그대로 사용
class BBB {
	AAA aa = new AAA();
	void ex2( ){
	aa.new1=0;
	aa. ex1( );
	}
}

2. 상속
-> 기존 클래스를 수정해서 사용
class CCC extends AAA {
	void ex1( ) {   <- 부모클래스와 함수명이 같은 
			// 수정, override
	
	}
	void ex2( ) {
	
	}
}

CCC cc = new CCC( );
cc.ex1();
cc.ex2();

* Java Beans
=> 용도 : 여러 변수를 묶어서 관리하기 위해서
=> 일반적으로 클래스 이름뒤에, DTO 또는 VO를 붙여서 
     클래스 이름을 많이 사용함
예) PersonDTO 또는 PersonVO
    -> DTO : Data Transfer Object
    -> VO : Value Object
=> 자바빈즈 규약대로 만들어진 클래스를 부르는 이름
=> 자바빈즈 규약
    - 멤버변수는 private 으로 만들고,
       기본 멤버함수는 public으로 만들기
    - 멤버변수마다 setter와 getter를 반드시 쌍으로 만들기
    - 반드시 매개변수 없는 생성자가 존재해야함

* [자바] 객체 배열의 초기화
만약 Student 클래스가 있는데 이걸 배열로 만들고 싶어요.
Student [] 변수명 = new Student[ 배열의 길이 ] ;
이렇게 선언한다.
for(int i=0; i < 배열의길이 ; i++){
 변수명[i] = new Student( 생성자에 포함된 매개변수들);
}
해서 전부 초기화를 해줌니다.

* 대량의 데이터 처리
1. 배열
2. 컬렉션 계열 클래스 (자료구조와 관련된 클래스)
3. 데이터베이스

* 다형성
=> 다양한 형태의 자식클래스들을 부모클래스로 제어하는 것
=> 쓰면 좋은 점 : 객체 배열을 사용할 수 있다. 
	           윈도우 프로그램에서 이벤트처리에 사용할 수 있다.
=> 부모는 자식을 품을 수 있지만, 자식은 부모를 품을 수 없다.
=> 용도: 1. 객체 배열
	2. 이벤트

<상속된 클래스의 사용법>
1. 자식클래스 기준(기본 사용법)
BBB bb = new BBB( );
bb.ex1( );
bb.ex2( );
2. 부모 클래스 기준 (다형성 방법) => 전제조건이 충족해야만 사용할수있음
AAA aa = new BBB( )(전제조건) => 사용하고자 하는 자식 클래스의 함수가 
aa.ex1( );			        반드시 부모클래스의 존재해야함
aa.ex2( );		

* 같은 지	검사
1. 정수, 실수, 문자, boolean
  if(a == 5) 명령문;
  if(b == 7.7) 명령문;
  if(c == 'A') 명령문;
  if(d == true) 명령문;
2. 문자열
   if(str.equals("ABC")명령문;

* 같지 않은지 검사
1. 정수, 실수, 문자, boolean
  if(a != 5) 명령문;
  if(b != 7.7) 명령문;
  if(c != 'A') 명령문;
  if(d != true) 명령문;
2. 문자열
   if(!str.equals("ABC")명령문;

<추상화> abstract, implement= 만들다, 구현하다
=> 다형성을 강제화 시키는 것 
<추상클래스>
=> 단독으로 사용할 수 없는 클래스

interface AA{
	void ex1();
	void ex2();
}
class BB implements AA{ => 다중 상속
	void ex1() {
	}
	void ex2() {
	}
}

* 상속된 클래스의 사용법
1. 자식 클래스 기준(기본 사용법)
	=> 다중 상속된 클래스는 반드시 자식 클래스 기준으로 사용
2. 부모 클래스 기준(다형성 방법)
	=> 사용하고자 하는 자식 클래스의 함수가 반드시 
		부모 클래스의 존재 해야한다.