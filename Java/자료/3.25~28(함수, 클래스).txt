* 함수 (=메소드)
 = > 어떤 기능을 수행하는 명령어들의 집합
 = > 명령어들을 기능별로 분리시켜서 사용하는 것
 = > 목적 : 코드를 기능별로 재사용하기 위해서
 = > 우선순위 : 약 2.5순위 
 = > 기본 동작 : 명령을 수행하다가 함수가 호출되면,
	똑같은 이름의 함수로 이동을 해서, 
	그 곳에 있는 명령어들을 실행하고,
	모든 명령을 다 실행하면, 
	호출된 곳으로 다시 돌아온다.

// 함수 만들기
1. 메인 함수에서 전달받을 값이 있는 지 확인 : 매개변수 만들지 여부 결정
2. 돌려줄 결과값이 있는 지 확인 : return을 사용할 지 여부 결정

=> 함수의 기본 모양
 결과자료형 함수명(매개변수){
	명령문;
	return 결과값;
}
=> 매개변수 : 다른 함수에서 전달받을 값이 있을 때 사용.
	      전달받을 값이 없으면 사용안함
=> 결과값 (=리턴값) : 어떤 결과를 돌려줄 때 사용 -> 출력하지 않을 때
		    돌려줄 값이 없으면 사용안함

* 배열을 함수로 사용할 때:  return값 필요없음, 
메인 함수에 있는 배열의 주소가 참조됨
==> 메인함수 안과 밖에 배열 값이 동일해짐 (주소가 같기 때문에)
배열의 이름 바꿔서 사용가능

<main>
int[] jumsu = new int[5];  ==> 선언
total = input(jumsu); ==> jumsu 배열을 참조 (값, 주소)
<함수>
static double calc_avg(int total, int[] k) { ==> jumsu 배열의 주소를 참조
return (double) total / k.length;
}

함수 오버로딩(함수 중복 정의)
함수의 이름이 같아도 매개변수의 자료형이나 개수가 다르면 사용 가능

// 전역 변수: 1. 모든 함수가 공동 사용 가능
	    2. static 변수: 프로그램이 시작 될 때, 메모리에 만들어지고,
			프로그램이 종료 될 때, 메모리에서 없어짐
			함수 밖에 변수들은 static을 앞에 붙여줘야함

// 지역 변수: 1. 함수 안에서만 사용 가능
    (권장)	     2. 함수가 시작될때, 메모리에 만들어 지고
	         함수가 종료될때, 메모리에서 없어짐
	     3. 전역변수와 지역변수의 이름이 같을때는 지역변수가 우선!!

* 클래스
1. 개념: 부품화(모듈화, 블럭화), user 자료형
2. 동작원리 -- 무조건 한번 사용
   - 생성자(함수) :  1. 클래스와 이름이 똑같은 함수
	    	2. 객체 생성시, 딱 한번 자동 호출됨
                	3. 우리가 사용할수 없는 함수
                	4. 목적: 멤버변수 초기화

   - this : 0번째 매개변수, 이 함수를 호출하는 객체의 주소가 저장됨,
	멤버 함수안의 모든 멤버변수 앞에는 this. 이 생략 되어있다.
	* 목적: 어떤 객체가 함수를 사용하는지 알기 위해서 
	전역변수와 지역변수가 이름이 같을 경우 반드시 this.을 붙여준다.
	(이름 지을때 용이)
3. 상속
4. 다형성
5. 추상화
6. 인터페이스

* 클래스의 구조
=> 변수 + 함수
class AAA{
	int a, b, c;	// 멤버 변수, 필드

	void ex1() {	// 멤버 함수, 메소드
		명령문;
	}
}

* 블럭의 구조
클래스{
	함수 {
		제어문{
			명령문;
	       }
	}
}

* 변수의 종류
1. 일반 변수
= > 데이터를 저장하는 변수
2. 레퍼런스 변수
= > 주소를 저장하는 변수
* 레퍼런스 변수의 초기화 방법
1. 함수를 사용하는 방법
2. 바로 초기화 하는 방법

* 자바에서의 클래스 작성시 권장사항
1. 파일 1 개당 클래스 1개만 만들기
2. 멤버 변수는 private
   멤버 함수는 public

* Java Beans
=> 용도 : 여러 변수를 묶어서 관리하기 위해서
=> 자바빈즈 규약대로 만들어진 클래스를 부르는 이름
=> 자바빈즈 규약
    - 멤버변수는 private 으로 만들고,
       기본 멤버함수는 public으로 만들기
    - 멤버변수마다 setter와 getter를 반드시 쌍으로 만들기
    - 반드시 매개변수 없는 생성자가 존재해야함

* 클래스의 구조
class AAA {
	// 멤버변수
	int num;
	// 멤버함수 : 1. 기본 멤버함수, 2. 일반 멤버함수
	// 기본 멤버함수: 생성자, setter, getter
	AAA() { 	// 생성자
	}
	void setNum(int num) {	// setter
		this.num = num;
	}
	int getNum() {		// getter
		return num;
	}
	// 일반 멤버함수: 기본 멤버함수를 제외한 나머지 함수들
}