-- 테이블 만들기
create table dbtest(
    name varchar2(15),
    age number,
    height number(10,2),
    logtime date
);
-- 테이블 확인
select * from tab;
-- 테이블 구조 확인
desc dbtest;
-- 테이블 삭제
drop table dbtest;
-- 테이블 복원
FLASHBACK table dbtest to before drop;
-- 테이블 삭제(휴지통을 거치지 않고)
drop TABLE dbtest purge;
-- 휴지통 비우기 
purge RECYCLEBIN;
-- 테이블에 데이터 추가하기
insert into dbtest(name,age,height,logtime)
VALUES('홍길동',25,185.567,sysdate);
--      ""사용불가  소수점2번째자리에서 반올림
insert into dbtest(name,age)values ('희동이',15);
insert into dbtest(name,height)values('홍당무',168.89);
insert into dbtest values ('황비홍',45,173.89,sysdate);
insert into dbtest values ('홍익인간',45,173.5,sysdate);
-- 데이터 확인
select * from DBTEST;   -- 전체 검색
select name from dbtest; -- 부분 검색
select name,age from dbtest;
select name,age,age+5 from dbtest;
-- 데이터 갯수 확인
select count(age) from dbtest; -- 값이 있는 데이터의 개수
select count(*) from dbtest; -- 전체 데이터 개수
-- 검색결과 정렬하기
select * from dbtest order by name asc; -- 오름차순
select * from dbtest order by age desc; -- 내림차순

-- 사용자 계정 만들기
create user jspexam identified by m1234;
-- 사용자 계정에 권한 부여하기
grant create session, create table, create sequence, create view to jspexam;
-- 사용자 계정의 테이블 스페이스를 users로 설정하기
alter user jspexam default tablespace users;
-- 사용자 계정에 테이블 스페이스 쿼터 할당하기
alter user jspexam quota unlimited on users;
-- system안의 모든 계정 확인하기
select * from all_users;
-- 계정 없애기
drop user jspexam;  -- table이 없을때 
drop user jspexam cascade;  -- table이 있을때 

create SEQUENCE sw_num
INCREMENT by 1
start with 1
NOMAXVALUE
NOCYCLE
NOCACHE;

create SEQUENCE test5
INCREMENT by 1
start with 2
NOMAXVALUE
NOCYCLE
NOCACHE;
drop SEQUENCE test5;
------------------------------------------------------
Create table join1(
    id varchar(20) primary key,
    pass varchar2(20),
    name varchar2(20)
);
create table game(
    player varchar2(20) not null PRIMARY KEY,
    id varchar2(20),
    time number,
    gamedate date ,
    Foreign key (id) references join1(id)
);
select * from game;
CREATE table test1(
    num int primary key,
    name VARCHAR2(15)
);
create table test2(
    book VARCHAR2(15),
    num int primary key,
    foreign key (num) REFERENCES test1(num)
);
insert into test1 VALUES(sw_num.nextval ,'a');
insert into test2 VALUES('book',1);
insert into test2 VALUES('book',test5.nextval);

insert into join1 values('aaa','123','a');
insert into join1 values('bbb','123','b');
insert into join1 values('ccc','123','c');
insert into join1 values('ddd','123','aa');
insert into join1 values('eee','123','ca');

insert into game values('a','aaa',1,sysdate);
insert into game values('b','bbb',1,sysdate);
insert into game values('c','ccc',1,sysdate);
insert into game values('d','ddd',1,sysdate);

select distinct g.time, g.GAMEDATE ,g.id from join j left OUTER join game g on j.name = g.ID ;
select g.time, g.gamedate, g.player from join1 j join game g on j.ID = g.id where j.ID='aaa';

select * from test1 t inner join test2 t2 on t.num = t2.num;
select * from test1 t left outer join test2 t2 on t.num = t2.num;
-------------------------------------------------------------------------
drop SEQUENCE sw_num;
select * from test1;
select * from test2;
select * from game;
select * from join;
drop table test2;
drop table join1 cascade CONSTRAINTS;
drop table game; 

CREATE table school (
    name varchar2(15) not null,
    value VARCHAR2(15),
    code number -- 1이면 학생, 2이면 교수, 3이면 관리자
);
insert into SCHOOL values ('홍길동','123',1);
select * from SCHOOL where name like '% %';
select * from school order by code;
select   name, value ,code,DENSE_RANK() over (order by code asc) as rank  from scho ol where rownum <= 4;
select a.* from(select substr(name,1,10) name, value, code, rank() over (order by code asc, value desc) as rank from school ) a where rownum<=5;
select count(*)+1 as rank from school where code < (select code from school where name = '31') order by code asc;
select name, value, code,DENSE_RANK() over (order by code asc) as rank from school
commit;


------------------------------------
CREATE TABLE department (
  deptno number NOT NULL ,
  dname varchar2(25) NOT NULL ,
  loc varchar2(10) DEFAULT NULL
);

INSERT INTO department VALUES (101, '컴퓨터공학과', '1호관'); 
INSERT INTO department VALUES (102, '멀티미디어학과', '2호관');
INSERT INTO department VALUES (201, '전자공학과', '3호관');
INSERT INTO department VALUES (202, '기계공학과', '4호관');
-- null 값을 줄 수 없다
insert into DEPARTMENT (dname, loc) values('컴퓨터공학과','1호관');

select * from department;
commit;

CREATE TABLE professor (
  profno number NOT NULL,
  name varchar2(20) NOT NULL,
  userid varchar2(10) NOT NULL,
  position varchar2(20) NOT NULL,
  sal number NOT NULL,
  hiredate date NOT NULL,
  comm number DEFAULT NULL,
  deptno number NOT NULL,
  PRIMARY KEY (profno));  
  /* primary key : not null(반드시 값이 있어야 한다), unique(유일한 값이어야 한다, 즉 데이터가 중복 되면 안된다.) */

INSERT INTO professor VALUES 
(9901, '김도훈', 'capool', '교수', 500, To_Date( '2010.12.08 16:33', 'yyyy.mm.dd hh24:mi'), 20, 101); 
INSERT INTO professor VALUES
(9902, '이재우', 'sweat413', '조교수', 320, To_Date( '1995.04.12 00:00:00', 'yyyy.mm.dd hh24:mi:ss'), null, 201); 
INSERT INTO professor VALUES
(9903, '성연희', 'pascal', '조교수', 360, To_Date('1993.03.17', 'YYYY.MM.DD'), 15, 101); 
INSERT INTO professor VALUES
(9904, '염일웅', 'blue77', '전임강사', 240, To_Date('1998-10-11 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), null, 102); 
INSERT INTO professor VALUES
(9905, '권혁일', 'refresh', '교수', 450,  To_Date('1986-02-11 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), 25, 102);
INSERT INTO professor VALUES
(9906, '이만식', 'pocari', '부교수', 420,  To_Date('1988-07-11 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), null, 101); 
INSERT INTO professor VALUES
(9907, '전은지', 'totoro', '전임강사', 210,  To_Date('2001-05-11 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), null, 101);
INSERT INTO professor VALUES
(9908, '남은혁', 'bird13', '부교수', 400,  To_Date('1990-10-18 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), 17, 202);
INSERT INTO professor VALUES
(9909, '남은혁', 'bird13', '부교수', 400,  to_date('1990-10-18 00:00:00', 'yyyy-mm-dd hh24:mi:ss'), 17, 202);

select * from PROFESSOR;
commit;

CREATE TABLE student (
  studno number NOT NULL,     -- COMMENT '학생번호',
  name varchar2(20) NOT NULL,  -- COMMENT '이름',
  userid varchar2(10) NOT NULL, -- COMMENT '아이디',
  grade number NOT NULL,     -- COMMENT '학년',
  idnum varchar2(13) NOT NULL, -- COMMENT '주민번호',
  birthdate date NOT NULL, -- COMMENT '생년월일',
  tel varchar2(15) NOT NULL,   -- COMMENT '전화번호',
  height number NOT NULL,    -- COMMENT '키',
  weight number NOT NULL,    -- COMMENT '몸무게',
  deptno number NOT NULL,    -- COMMENT '학과번호',
  profno number DEFAULT NULL, -- COMMENT '담당교수의 일련번호',
  PRIMARY KEY (studno)) ;
 
 INSERT INTO student VALUES 
(10101, '전인하', 'jun123', 4, '7907021369824', To_Date('1979-07-02', 'yyyy-mm-dd'), '051)781-2158', 176, 72, 101, 9903); 
INSERT INTO student VALUES 
(10102, '박미경', 'ansel414', 1, '8405162123648', To_Date('1984-05-16', 'yyyy-mm-dd'), '055)261-8947', 168, 52, 101, null);
INSERT INTO student VALUES 
(10103, '김영균', 'mandu', 3, '8103211063421', To_Date('1981-03-21', 'yyyy-mm-dd'), '051)824-9637', 170, 88, 101, 9906); 
INSERT INTO student VALUES 
(10104, '지은경', 'gomo00', 2, '8004122298371', To_Date('1980-04-12', 'yyyy-mm-dd'), '055)418-9627', 161, 42, 101, 9907); 
INSERT INTO student VALUES 
(10105, '임유진', 'youjin12', 2, '8301212196482', To_Date('1983-01-21', 'yyyy-mm-dd'), '02)312-9838', 171, 54, 101, 9907); 
INSERT INTO student VALUES 
(10106, '서재진', 'seolly', 1, '8511291186273', To_Date('1985-11-29', 'yyyy-mm-dd'), '051)239-4861', 186, 72, 101, null); 
INSERT INTO student VALUES 
(10107, '이광훈', 'huriky', 4, '8109131276431', To_Date('1981-09-13', 'yyyy-mm-dd'), '055)736-4981', 175, 92, 101, 9903); 
INSERT INTO student VALUES 
(10108, '류민정', 'cleansky', 2, '8108192157498', To_Date('1981-08-19', 'yyyy-mm-dd'), '055)248-3679', 162, 72, 101, 9907); 
INSERT INTO student VALUES 
(10201, '김진영', 'simply', 2, '8206062186327', To_Date('1982-06-06', 'yyyy-mm-dd'), '055)419-6328', 164, 48, 102, 9905); 
INSERT INTO student VALUES 
(10202, '오유석', 'yousuk', 4, '7709121128379', To_Date('1977-09-12', 'yyyy-mm-dd'), '051)724-9618', 177, 92, 102, 9905); 
INSERT INTO student VALUES 
(10203, '하나리', 'hanal', 1, '8501092378641', To_Date('1985-01-09', 'yyyy-mm-dd'), '055)296-3784', 160, 68, 102, null); 
INSERT INTO student VALUES 
(10204, '윤진욱', 'samba7', 3, '7904021358671', To_Date('1979-04-02', 'yyyy-mm-dd'), '053)487-2698', 171, 70, 102, 9905); 
INSERT INTO student VALUES 
(20101, '이동훈', 'dals', 1, '8312101128467', To_Date('1983-12-10', 'yyyy-mm-dd'), '055)426-1752', 172, 64, 201, null); 
INSERT INTO student VALUES 
(20102, '박동진', 'ping2', 1, '8511241639826', To_Date('1985-11-24', 'yyyy-mm-dd'), '051)742-6384', 182, 70, 201, null); 
INSERT INTO student VALUES 
(20103, '김진경', 'lovely', 2, '8302282169387', To_Date('1983-02-28', 'yyyy-mm-dd'), '052)175-3941', 166, 51, 201, 9902); 
INSERT INTO student VALUES 
(20104, '조명훈', 'rader214', 1, '8412141254963', To_Date('1984-12-14', 'yyyy-mm-dd'), '02)785-6984', 184, 62, 201, null);
  

select * from student;
commit;

-- 문제 1 학생 테이블의 학생이름과 학생번호를 출력하여라
select name, studno from student;
-- 문제 2 학생 테이블에서 중복되는 행을 제외한 학과번호 출력
select distinct deptno  from student ; 
-- 문제 3 학과테이블에서 학과이름 칼럼의 별명은 dept_name, 학과번호 칼럼의 별명은 DN으로 부여하여 출력
-- 방법 1
select dname as dept_name, deptno as DN from DEPARTMENT;
-- 방법 2
select dname dept_name, deptno DN from DEPARTMENT;
-- 문제 4 department 테이블을 사용하여 deptno를 학과, dname를 학과명, loc를 위치로 별명을 설정하여 출력
SELECT deptno as 학과, dname as 학과명, loc as 위치 from DEPARTMENT;
-- 문제 5 교수 테이블에서 교수이름, 급여,보너스를 포함한 연봉을 출력
select name as 교수이름, sal,(sal*12+100) as 연봉 from PROFESSOR;
-- 문제 6 학생 테이블에서 1학년 학생만 검색하여 학번, 이름, 학과 번호를 출력
select studno, name, deptno from STUDENT where grade = 1;
-- 문제 7 학생테이블에서 학과번호가 101번인 학생들의 학번, 이름, 학년을 출력
select STUDENT.STUDNO, name, grade from STUDENT where DEPTNO=101;
-- 문제 8 학생 테이블에서 몸무게가 70kg 이하인 학생만 검색하여 학번, 이름, 학년, 학과번호, 몸무게를 출력
select studno, name, grade, deptno, weight from STUDENT where WEIGHT <=70;
-- 문제 9 학생 테이블에서 키가 170이상인 학생의 학번, 이름, 학년, 학과번호, 키를 출력하여라.
SELECT studno, name, grade, deptno, height from student where height >=170;
-- 문제 10 학생 테이블에서 1학년이면서 몸무게가 70kg 이상인 학생만 검색하여 이름, 학번, 학년, 모무게, 학과 번호를 출력하여라
select name, grade,WEIGHT, deptno from student where grade =1 and weight >=70;
-- 문제 11 학생 테이블에서 1학년 이거나 몸무게가 70kg이상인 학생만 검색하여 이름, 학번, 학년, 몸무게, 학과 번호를 출력하여라
select name, studno, grade, weight, deptno from student where grade =1 or weight >=70;
-- 문제 12 학생 테이블에서 성이 김씨인 학생의 이름, 학년, 학과번호를 출력
select name, grade,deptno from student where name like '김%';
-- 문제 13 학생 테이블에서 이름을 가나다 순으로 정렬하여 이름, 학년, 전화번호를 출력
select name, grade, tel from student order by name asc;
-- 문제 14 학생 테이블에서 101번 학과에 소속된 학생들의 이름, 학년, 학과번호를 생년월일이 빠른 순으로 출력하여라.
select name, grade, deptno, birthdate from student where deptno =101 order by birthdate asc;
-- 문제 15 학생 테이블에 아래의 결과처럼 홍길동 학생의 데이터 입력하기
insert into STUDENT values(10110,'홍길동','hgd85',1,'8501011143098',to_date('13-10-01','yy-mm-dd'),'031)-777-7777',170,70,101,9903);
select * from student where name ='홍길동';
-- 문제 16 교수 테이블에서 다음의 데이터를 입력
insert into PROFESSOR values(9921,'홍길동','hong','조교',230,sysdate,null,102);
-- 입력 값이 없을때는 null값을 주어도 된다.
DELETE from PROFESSOR where name ='홍길동';
select * from PROFESSOR where name ='홍길동';
-- 문제 17 교수 번호가 9903인 직원의 현재 직급을 '교수'로 수정하고 급여를 400으로 수정
UPDATE PROFESSOR set position = '교수', SAL=400 where PROFNO =9903;
select  * from PROFESSOR where PROFNO = 9903;
-- 문제 18 학생테이블에서 학번이 20103인 학생의 데이터를 삭제
DELETE from STUDENT where STUDNO =20103;
select * from student;
--------------------------------------------
-- 테이블 만들기
create table dbtest(
    name varchar2(15),
    age number,
    height number(10,2),
    logtime date
);
-- 테이블 확인
select * from tab;
-- 테이블 구조 확인
desc dbtest;
-- 테이블 삭제
drop table dbtest;
-- 테이블 복원
FLASHBACK table dbtest to before drop;
-- 테이블 삭제(휴지통을 거치지 않고)
drop TABLE dbtest purge;
-- 휴지통 비우기 
purge RECYCLEBIN;
-- 테이블에 데이터 추가하기
insert into dbtest(name,age,height,logtime)
VALUES('홍길동',25,185.567,sysdate);
--      ""사용불가  소수점2번째자리에서 반올림
insert into dbtest(name,age)values ('희동이',15);
insert into dbtest(name,height)values('홍당무',168.89);
insert into dbtest values ('황비홍',45,173.89,sysdate);
insert into dbtest values ('홍익인간',45,173.5,sysdate);
insert into dbtest values ('Hong',25,185.567,sysdate);
-- 데이터 확인
select * from DBTEST;   -- 전체 검색
select name from dbtest; -- 부분 검색
select name,age from dbtest;
select name,age,age+5 from dbtest;
-- 데이터 갯수 확인
select count(age) from dbtest; -- 값이 있는 데이터의 개수
select count(*) from dbtest; -- 전체 데이터 개수
-- 검색결과 정렬하기
select * from dbtest order by name asc; -- 오름차순
select * from dbtest order by age desc; -- 내림차순
--4.18
select * from dbtest order by age asc, name desc;
-- 조건 검색 : 조건에 일치하는 데이터만 검색
select * from dbtest where name = '홍길동';
select * from dbtest where name = 'hong';  -- 데이터는 대소문자 구분
select * from dbtest where name = 'Hong';
-- 특정 글자가 들어간 데이터 검색
/* 주의 : 일치되는 데이터만 = 을 사용 */
-- * from dbtest where name '%홍%';  결과 안나옴
select * from dbtest where name like '%홍%';
-- 앞 글자가 '홍'인 사람 검색
select * from dbtest where name like '홍%';
-- 앞 글자가 '홍'이면서 글자수가 3글자인 사람 검색
select * from dbtest where name like '홍__';
-- 이름중 '홍'이 있으면서 나이가 20세 이상인 사람 검색
select * from dbtest where name like '%홍%' and age >=20;
-- 데이터 중에서 null 값이 저장된 데이터 검색
select * from dbtest where age is null;
-- 데이터 중에서 null 값이 아닌 데이터 검색
select * from dbtest where age is not null;
select * from dbtest where age is not null and HEIGHT is not null;
/* commit : db파일에 데이터 저장
   rollback : db파일에 저장된 상태로 되돌리기 */
rollback;
delete  from dbtest where name ='Hong';
commit;
-- 데이터 수정
/* 주의 : 모든 데이터가 수정되지 않도록 조심 */
select * from dbtest;
update dbtest set age = age +1;
update dbtest set age = age -1;
select * from dbtest;
update dbtest set age = age +1 where name = '홍길동';
-- 나이가 없는 곳에 나이를 100으로 수정하기
update dbtest set age = 100 where age is null;

-- 데이터 삭제
/* 주의 : 모든 데이터가 삭제되지 않도록 조심 */
delete dbtest;
-- 나이가 null인 사람 삭제하기
delete from dbtest where age is null;
-- 3번째 글자가 '홍'인 데이터를 찾아서 삭제하기
delete from dbtest where name like '__홍';
insert into DBTEST values('홍
-----------------------------------------------------------------

